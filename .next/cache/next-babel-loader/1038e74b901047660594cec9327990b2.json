{"ast":null,"code":"import { useEffect } from 'react';\nvar win = true ? window : nu;\n\nfunction useEventListener(eventName, handler) {\n  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  // Create a ref that stores handler\n  var savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    // Make sure element supports addEventListener\n    // On\n    var isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    var eventListener = function eventListener(event) {\n      return savedHandler.current(event);\n    }; // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return function () {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["/Users/andrew/Projects/findsee/src/hooks/useEventListener.js"],"names":["useEffect","win","window","nu","useEventListener","eventName","handler","element","savedHandler","useRef","current","isSupported","addEventListener","eventListener","event","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,IAAMC,GAAG,GAAG,OAA8BC,MAA9B,GAAqCC,EAAjD;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAAgE;AAAA,MAAlBC,OAAkB,uEAARL,MAAQ;AAC/D;AACA,MAAMM,YAAY,GAAGC,MAAM,EAA3B,CAF+D,CAI/D;AACA;AACA;AACA;;AACAT,EAAAA,SAAS,CAAC,YAAM;AACfQ,IAAAA,YAAY,CAACE,OAAb,GAAuBJ,OAAvB;AACA,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CACR,YAAM;AACL;AACA;AACA,QAAMW,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;AACA,QAAI,CAACD,WAAL,EAAkB,OAJb,CAML;;AACA,QAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,aAAIN,YAAY,CAACE,OAAb,CAAqBI,KAArB,CAAJ;AAAA,KAA3B,CAPK,CASL;;;AACAP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EAVK,CAYL;;AACA,WAAO,YAAM;AACZN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACA,KAFD;AAGA,GAjBO,EAkBR,CAACR,SAAD,EAAYE,OAAZ,CAlBQ,CAkBa;AAlBb,GAAT;AAoBA;;AAED,eAAeH,gBAAf","sourcesContent":["import { useEffect } from 'react';\n\nconst win = typeof window !== 'undefined'?window:nu\n\nfunction useEventListener(eventName, handler, element = window) {\n\t// Create a ref that stores handler\n\tconst savedHandler = useRef();\n\n\t// Update ref.current value if handler changes.\n\t// This allows our effect below to always get latest handler ...\n\t// ... without us needing to pass it in effect deps array ...\n\t// ... and potentially cause effect to re-run every render.\n\tuseEffect(() => {\n\t\tsavedHandler.current = handler;\n\t}, [handler]);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// Make sure element supports addEventListener\n\t\t\t// On\n\t\t\tconst isSupported = element && element.addEventListener;\n\t\t\tif (!isSupported) return;\n\n\t\t\t// Create event listener that calls handler function stored in ref\n\t\t\tconst eventListener = event => savedHandler.current(event);\n\n\t\t\t// Add event listener\n\t\t\telement.addEventListener(eventName, eventListener);\n\n\t\t\t// Remove event listener on cleanup\n\t\t\treturn () => {\n\t\t\t\telement.removeEventListener(eventName, eventListener);\n\t\t\t};\n\t\t},\n\t\t[eventName, element] // Re-run if eventName or element changes\n\t);\n}\n\nexport default useEventListener;\n"]},"metadata":{},"sourceType":"module"}