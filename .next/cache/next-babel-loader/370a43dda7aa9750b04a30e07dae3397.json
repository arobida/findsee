{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/andrew/Projects/findsee/src/context/ShowContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nconst defaultValues = {\n  shows: [],\n  getShows: () => {}\n};\nexport const ShowContext = createContext(defaultValues);\nexport const ShowProvider = ({\n  children\n}) => {\n  const router = useRouter();\n  const {\n    0: shows,\n    1: setShows\n  } = useState([]);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: showId,\n    1: setId\n  } = useState('');\n\n  const getShows = async () => {\n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${query}`);\n    const data = await res.json(); //console.log(data);\n\n    setShows(data);\n    console.log(shows);\n    return data;\n  };\n\n  const getQuery = val => {\n    setQuery(val);\n  };\n\n  return __jsx(ShowContext.Provider, {\n    value: _objectSpread({}, defaultValues, {\n      shows,\n      getShows,\n      query,\n      getQuery\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/andrew/Projects/findsee/src/context/ShowContext.js"],"names":["React","createContext","useState","useEffect","useRouter","defaultValues","shows","getShows","ShowContext","ShowProvider","children","router","setShows","query","setQuery","showId","setId","res","fetch","data","json","console","log","getQuery","val"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAFG,CAAtB;AAKA,OAAO,MAAMC,WAAW,GAAGP,aAAa,CAACI,aAAD,CAAjC;AACP,OAAO,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7C,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAM;AAAA,OAACE,KAAD;AAAA,OAAQM;AAAR,MAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACa,MAAD;AAAA,OAASC;AAAT,MAAkBd,QAAQ,CAAC,EAAD,CAAhC;;AAGA,QAAMK,QAAQ,GAAG,YAAY;AAC5B,UAAMU,GAAG,GAAG,MAAMC,KAAK,CAAE,yCAAwCL,KAAM,EAAhD,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB,CAF4B,CAG5B;;AACAR,IAAAA,QAAQ,CAACO,IAAD,CAAR;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACA,WAAOa,IAAP;AACA,GAPD;;AASA,QAAMI,QAAQ,GAAGC,GAAG,IAAI;AACvBV,IAAAA,QAAQ,CAACU,GAAD,CAAR;AACA,GAFD;;AAMA,SACC,MAAC,WAAD,CAAa,QAAb;AACC,IAAA,KAAK,oBAAOnB,aAAP;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA,QAA7B;AAAuCM,MAAAA,KAAvC;AAA8CU,MAAAA;AAA9C,MADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGEb,QAHF,CADD;AAOA,CA7BM","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst defaultValues = {\n\tshows: [],\n\tgetShows: () => {}\n};\n\nexport const ShowContext = createContext(defaultValues);\nexport const ShowProvider = ({ children }) => {\n\tconst router = useRouter();\n\tconst [shows, setShows] = useState([]);\n\tconst [query, setQuery] = useState('');\n\tconst [showId, setId] = useState('')\n\n\n\tconst getShows = async () => {\n\t\tconst res = await fetch(`https://api.tvmaze.com/search/shows?q=${query}`);\n\t\tconst data = await res.json();\n\t\t//console.log(data);\n\t\tsetShows(data);\n\t\tconsole.log(shows);\n\t\treturn data;\n\t};\n\n\tconst getQuery = val => {\n\t\tsetQuery(val);\n\t};\n\n\n\n\treturn (\n\t\t<ShowContext.Provider\n\t\t\tvalue={{ ...defaultValues, shows, getShows, query, getQuery }}\n\t\t>\n\t\t\t{children}\n\t\t</ShowContext.Provider>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}