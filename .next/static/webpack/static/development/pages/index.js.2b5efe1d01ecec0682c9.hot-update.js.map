{"version":3,"file":"static/webpack/static/development/pages/index.js.2b5efe1d01ecec0682c9.hot-update.js","sources":["webpack:///./src/hooks/useEventListener.js"],"sourcesContent":["import { useEffect } from 'react';\n\nconst win = typeof window !== 'undefined'?window:null\n\nfunction useEventListener(eventName, handler, element = window) {\n\t// Create a ref that stores handler\n\tconst savedHandler = useRef();\n\n\t// Update ref.current value if handler changes.\n\t// This allows our effect below to always get latest handler ...\n\t// ... without us needing to pass it in effect deps array ...\n\t// ... and potentially cause effect to re-run every render.\n\tuseEffect(() => {\n\t\tsavedHandler.current = handler;\n\t}, [handler]);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// Make sure element supports addEventListener\n\t\t\t// On\n\t\t\tconst isSupported = element && element.addEventListener;\n\t\t\tif (!isSupported) return;\n\n\t\t\t// Create event listener that calls handler function stored in ref\n\t\t\tconst eventListener = event => savedHandler.current(event);\n\n\t\t\t// Add event listener\n\t\t\telement.addEventListener(eventName, eventListener);\n\n\t\t\t// Remove event listener on cleanup\n\t\t\treturn () => {\n\t\t\t\telement.removeEventListener(eventName, eventListener);\n\t\t\t};\n\t\t},\n\t\t[eventName, element] // Re-run if eventName or element changes\n\t);\n}\n\nexport default useEventListener;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;;;;A","sourceRoot":""}